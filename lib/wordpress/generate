#!/bin/bash

# Generate
# Creates something within a WP installation
# $1 = What kind of thing we want to generate (-p => Plugin, -t => Theme)
# $2 = Name of the thing to generate
# $3 = WP installation name
generate(){
	if [[ $WP != true ]]; then
		echo "$FUNCNAME is not an Aina command. Try [lib] $FUNCNAME instead"
		return
	fi
	if [[ -z "$1" ]]; then
		echo "What would you like to generate?"
		echo "-t [A New Theme], -p [A New Plugin], -pt [A New Post Type]"
	fi
	case $1 in
		-t ) # Theme
			if [[ ! $2 ]]; then
				echo "Theme Name:"
				read THEME_NAME
				while [[ -z "$THEME_NAME" ]]; do
					echo "Please, type a Theme Name:"
					read THEME_NAME
				done
				echo "Project Name:"
				read PROJECT_NAME
				while [[ -z "$PROJECT_NAME" ]]; do
					echo "Please, type your project name:"
					read PROJECT_NAME
				done
				mkdir ~/$server_dir/$PROJECT_NAME/wp-content/themes/$THEME_NAME
				return
			fi
			mkdir ~/$server_dir/$3/wp-content/themes/$2
			echo
			echo "You have created a new theme $2 in WP installation $3"
			echo
			;;
		-p | plugin ) # Plugin
			mkdir ~/$server_dir/$3/wp-content/plugins/$2
			echo
			echo "You have created a new plugin $2 in WP installation $3"
			echo
			;;
		-pt | post_type ) # Post Type
		    post_type "$@"
			;;	
	esac
}

# Post Type
# Generate a custom Post Type $1 in theme $2
post_type(){
	
	#
	# Set variables
	#
	local DIR_POST_TYPES="post-types"
	#local POST_TYPE=$2

	#
	# Promt por the post type name
	#
	echo "Post Type Name (singular):"
	read POST_TYPE
	if [[ -z "$POST_TYPE" ]]; then
		echo "Please, type your post type's name"
		read POST_TYPE
	fi

	#
	# Promt por the project name
	#
	echo "Project Name:"
	read PROJECT_NAME
	while [[ -z "$PROJECT_NAME" ]]; do
		echo "Please, type your project's name"
		read PROJECT_NAME
	done

	#
	# Promt por the project name
	#
	echo "Theme Name:"
	read THEME_NAME
	while [[ -z "$THEME_NAME" ]]; do
		echo "Please, type your theme's name"
		read THEME_NAME
	done

	
	#local THEME_NAME=$3
	local PROJECT_PATH=~/$server_dir/$PROJECT_NAME
	local THEME_PATH=$PROJECT_PATH/$WP_THEMES_PATH/$THEME_NAME

	#
	# TO DO
	#
	# Manual or automatic 
	#
	# echo "How do you want to proceed? Automatic(A) or Manual(M) ?"
	# read PROCESS
	# while [[ -z "$PROCESS" ]]; do
	# 	echo "Do you want an Automatic (A) with default settings, or a Manual (M)"
	# 	read PROCESS
	# done
	local PROCESS="A"

	local UC_POST_TYPE=$(ucfirst $POST_TYPE)
	#echo $UC_POST_TYPE # this works

	if [[ $PROCESS =~ ^[Aa]$ ]]; then
		# Labels
		local PT_NAME="${UC_POST_TYPE}s" # but this gets the variable name printed, instead of the value
		local PT_SINGULAR_NAME="$UC_POST_TYPE Item"
		local PT_ADD_NEW="New $UC_POST_TYPE"
		local PT_ADD_NEW_ITEM="Add New $UC_POST_TYPE"
		local PT_EDIT_ITEM="Edit $UC_POST_TYPE"
		local PT_NEW_ITEM="New $UC_POST_TYPE"
		local PT_VIEW_ITEM="View $UC_POST_TYPE"
		local PT_SEARCH_ITEMS="Search $UC_POST_TYPE"
		local PT_NOT_FOUND='Nothing found'
		local PT_NOT_FOUND_IN_TRASH='Nothing found in Trash'
		local PT_PARENT_ITEM_COLON=''

		# Arguments
		local PT_LABELS="\$labels"
		local PT_PUBLIC="true"
		local PT_PUBLICLY_QUERYABLE="true"
		local PT_SHOW_UI="true"
		local PT_QUERY_VAR="true"
		local PT_MENU_ICON="get_stylesheet_directory_uri() . '/pt_producto_icon.png'"
		local PT_REWRITE="true"
		local PT_CAPABILITY_TYPE="page"
		local PT_HIERARCHICAL="true"
		local PT_HAS_ARCHIVE="true"
		local PT_MENU_POSITION="null"
		local PT_SUPPORTS="array('title','editor','thumbnail','excerpt')"
	# elif [[ $PROCESS == 'M' ]]; then
		#statements
	fi

	# Attempt to create a custom dir
	echo "Create $DIR_POST_TYPES dir..."
	if [ ! -d "$THEME_PATH/$DIR_POST_TYPES" ]; then
	    mkdir "$THEME_PATH/$DIR_POST_TYPES"
	fi

	echo "Generating $POST_TYPE post type..."
	touch "$THEME_PATH/$DIR_POST_TYPES/$POST_TYPE".php
	echo "<?php

/**
 * Custom Post Type: "$POST_TYPE"
 * Generated with Aina. Version "$AINA_VERSION"
 */

/* "$POST_TYPE" Properties */
function "$POST_TYPE"_register() {
	\$labels = array(
		'name' 					=> _x('"$PT_NAME"'),
		'singular_name' 		=> _x('"$PT_SINGULAR_NAME"'),
		'add_new' 				=> _x('"$PT_ADD_NEW"'),
		'add_new_item' 			=> __('"$PT_ADD_NEW_ITEM"'),
		'edit_item' 			=> __('"$PT_EDIT_ITEM"'),
		'new_item' 				=> __('"$PT_NEW_ITEM"'),
		'view_item' 			=> __('"$PT_VIEW_ITEM"'),
		'search_items' 			=> __('"$PT_SEARCH_ITEMS"'),
		'not_found' 		 	=> __('"$PT_NOT_FOUND"'),
		'not_found_in_trash' 	=> __('"$PT_NOT_FOUND_IN_TRASH"'),
		'parent_item_colon'  	=> '"$PT_PARENT_ITEM_COLON"',
	);
	\$args = array(
		'labels' 				=> \$labels,
		'public' 				=> "$PT_PUBLIC",
		'publicly_queryable' 	=> "$PT_PUBLICLY_QUERYABLE",
		'show_ui' 				=> "$PT_SHOW_UI",
		'query_var' 			=> "$PT_QUERY_VAR",
		'menu_icon' 			=> false, // get_stylesheet_directory_uri() . '/your_pt_icon_here.png'
		'rewrite' 				=> "$PT_REWRITE",
		'capability_type' 		=> '"$PT_CAPABILITY_TYPE"',
		'hierarchical' 			=> "$PT_HIERARCHICAL",
		'has_archive' 			=> "$PT_HAS_ARCHIVE",
		'menu_position' 		=> "$PT_MENU_POSITION",
		'supports' 				=> "$PT_SUPPORTS",
	  ); 
	register_post_type( '"$POST_TYPE"' , \$args );
}

add_action('init', '"$POST_TYPE"_register');


/* "$UC_POST_TYPE" Taxonomy */
register_taxonomy(
	'Categories', 
	array('"$POST_TYPE"'), 
	array(
		'name' 					=> _x( 'Categories', 'taxonomy general name' ),
		'label' 				=> __( 'Categories' ), 
		'singular_label' 		=> 'Category', 
		'rewrite' 				=> true
));" > "$THEME_PATH/$DIR_POST_TYPES/$POST_TYPE.php"

}